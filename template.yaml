apiVersion: v1
kind: Template
labels:
  template: spring-boot-application
  group: spring-boot-application
metadata:
  annotations:
    iconClass: icon-java
    tags: spring-boot,java,spring-cloud
  name: spring-boot-application
message: "Depoly Springboot Application"
parameters:
- displayName: Project Name
  value: dlu
  name: PROJECT_NAME
  required: true
- displayName: Application Name
  value: user-mgmt-service
  name: APPLICATION_NAME
  required: true
- displayName: Git Repo URI
  value: https://github.com/DayongLu/user-mgmt-service.git
  name: GIT_URI
  required: true
- displayName: Config Server URI
  value: "http://demo-cs-as-config-server.middleware.svc.cluster.local:8888"
  name: CONFIG_SERVER_URI
  required: false
- displayName: Spring Running Profile
  value: stage
  name: SPRING_ACTIVE_PROFILE
  required: false
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${PROJECT_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: 'springboot-maven3-centos:latest'
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: '-bQnWBPfSehj73jpuwSC'
      type: GitHub
    - generic:
        secret: mlt48zIoqCdRUUKqyvK-
      type: Generic
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: springboot-maven3-centos
    namespace: ${PROJECT_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: codecentric/springboot-maven3-centos
      from:
        kind: DockerImage
        name: codecentric/springboot-maven3-centos
      generation: 2
      importPolicy: {}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${PROJECT_NAME}
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    namespace: ${PROJECT_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
          - env:
            - name: SPRING_PROFILES_ACTIVE
              value: ${SPRING_ACTIVE_PROFILE}
            - name: SPRING_APPLICATION_NAME
              value: ${APPLICATION_NAME}
            - name: SPRING_CLOUD_CONFIG_URI
              value: ${CONFIG_SERVER_URI}
            name: ${APPLICATION_NAME}
            image: "docker-registry.default.svc:5000/${PROJECT_NAME}/${APPLICATION_NAME}:latest"
            ports:
              - containerPort: 8080
                protocol: TCP

            imagePullPolicy: Always
            terminationMessagePath: /dev/termination-log
            resources: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${APPLICATION_NAME}", "namespace": "${PROJECT_NAME}", "kind": "DeploymentConfig"}]'
    name: "${APPLICATION_NAME}-pipeline"
  spec:
#    source:
#      git:
#        ref: master
#        uri: ${GIT_URI}
#      type: Git
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {


            stage('Build Source To Image') {
              sh "oc start-build ${APPLICATION_NAME} --follow"
            }
            stage('Deploy') {
              openshiftDeploy depCfg: '${APPLICATION_NAME}'
              openshiftVerifyDeployment depCfg: '${APPLICATION_NAME}', replicaCount: 1, verifyReplicaCount: true
            }

          }